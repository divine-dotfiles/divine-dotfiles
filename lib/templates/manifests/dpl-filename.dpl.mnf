## This is an annotated example of an asset manifest. It is simply a list of 
#. files (e.g., config files) required by a particular deployment. What a 
#. manifest does is it allows framework to automatically copy provided initial 
#. versions of assets to user’s Grail directory, where these versions will then 
#. be worked with by the deployment.
#
## By default, manifest file must be placed next to deployment file and named 
#. identically, except for changing ‘.dpl.sh’ suffix to ‘dpl.mnf’. 
#. Alternatively, full path to manifest file may be provided in the root of 
#. deployment file by assigning it to global variable $D__DPL_MNF_PATH.
#
## Paths to assets must be given relative to deployment directory, as recorded 
#. in $D__DPL_DIR. A path may be written explicitly, or using a simplified 
#. regular expression.
#
## One path/pattern is written per line.
#
## A line enclosed in a pair of parentheses is a section head. A section head 
#. changes how lines are interpreted until the next section head changes that 
#. again.
#
## Section head may set a prefix for following asset paths as such:
#>  (prefix: sub-dir-name)
#. Prefix is useful when you move your assets into a sub-directory within 
#. deployment directory. Instead of explicitly writing each asset path with 
#. sub-directory, you may just set it once using such section head. Path prefix 
#. is used to locate your assets, but is not carried over to user’s assets 
#. directory. Leading and trailing slashes are optional.
#
## Section head may force the following lines to only be considered if detected 
#. OS ($D__OS_FAMILY or $D__OS_DISTRO, see detect-os.pcd.sh for reference) 
#. matches at least one of vertical bar-delimited options provided in section 
#. head:
#>  ( linux | wsl )
#. Lines that are not restricted to a particular OS should appear before any 
#. OS-restricting section head.
#
## For line to be interpreted as regular expression, it must begin with '(r)' 
#. (sans quotes). Within a regex, only four special symbols are recognized: 
#. '[', ']', '*', and '?'. (In fact, under the hood, the pattern is used as 
#. '-path' primary of 'find' utility.)
#
## When an asset is listed as a regular path, its presence is enforced by the 
#. framework, i.e., deployment will not work unless all such assets are present 
#. into deployment’s asset directory. However, when an asset is listed as a 
#. regular expression, its presence is not enforced at all.
#
## Whitespace is generally permitted between paths, words, and delimiters.
#

# Below are examples of regular assets:
fileA.cfg
fileB.cfg
file/in/subdir

# Below are examples of regex assets:
(r)     file[0-9].txt
(r)     some/*.files

(prefix:subdir) # Section head: lines below are stored in 'subdir' directory
one.f
two.f

(debian|bsd) # Section head: lines below are only considered on Debian or BSD
(prefix:) # Removing prefix from above, as it is still in force
        file-only-on-debian-or-bsd.ext
(r)     dir/only/on/*.debian-or-bsd