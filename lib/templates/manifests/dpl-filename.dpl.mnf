#:title:        Asset manifest annotated template
#:author:       Grove Pyree
#:email:        grayarea@protonmail.ch
#:revnumber:    11
#:revdate:      2019.08.29
#:revremark:    Make manifest flag appending explicit
#:created_at:   2019.08.06

## This is an annotated example of an asset manifest. It is simply a list of 
#. files (e.g., config files) required by a particular deployment. What a 
#. manifest does is it allows framework to automatically copy provided initial 
#. versions of assets to user's Grail directory (withour overwriting), where 
#. these versions will then be worked with by the deployment and the user.
#
## Asset manifest must be placed next to deployment file and named identically, 
#. except for changing suffix from '*.dpl.sh' to '*.dpl.mnf'.
#
## Paths to assets must be given relative to deployment directory, as recorded 
#. in $D__DPL_DIR. One path/pattern is written per line.
#
## Behavior of each manifest entry can be tweaked by assigning certain values 
#. to certain keys.
#
## Key-values are set within parentheses at the beginning of the line, before 
#. any asset entry. Edge whitespace is insignificant. When they share a line 
#. with an asset entry, they affect only that asset entry. When they appear on 
#. a line by themselves, they come into effect for the remainder of the 
#. manifest, or until overridden:
#>    (local-key1: value) (local-key2: value) entry-affected-by-local-keys
#>    (global-key: value)
#>    entries-affected-by-global-key
#
## The following keys are recognized within asset manifests:
#.  * 'os'      - List of OS's on which an asset is recognized
#.  * 'flags'   - Any number of single-character flags (list below)
#.  * 'prefix'  - Asset's sub-directory (description below)
#.  * 'queue'   - When set to value 'split', inserts queue split
#
## With regard to 'flags' key, a shorthand is provided:
#>    (r) flagged-entry   # Parentheses must not contain colon ':'
#
## Flags may be appended to those currently in effect, instead of replacing 
#. them, by including the plus sign '+' as the first non-whitespace char of the 
#. flags' value:
#>    (+r)          flagged-entry1
#>    (flags: + r)  flagged-entry2
#
##  OS:
#
## Entries may be made exclusive to particular OS family or distro. List of 
#. them may be provided by separating with vartical bars. Entire list may be 
#. negated by including exclamation mark '!' as the first non-whitespace char 
#. of the key's value.
#>    (os: debian)      asset1
#>    (os: macos|bsd)   asset2
#>    (os: !wsl|cygwin) asset3
#>    (os: all)         asset4    ## 'all'/'any' are reserved values that 
#>                                #. denote any OS
#
## NOTE: OS name is matched against $D__OS_FAMILY and $D__OS_DISTRO variables. 
#. Single match against any of the two is sufficient. For reference and list of 
#. supported OS's, browse through OS adapters in lib/adapters.
#
##  FLAGS:
#
## Each valid manifest line may be flagged `r` for regular expression. POSIX 
#. Extended Regular Expressions dialect is used. (Under the hood, the pattern 
#. is fed to '-regex' primary of 'find' utility.)
#
## If you don't need an asset to be copied into asset directory, but would 
#. rather instead work with it in its original location, flag it `d` for 
#. deployment-dir-only.
#
## By default all assets are mandatory: at least one matching file/dir must be 
#. provided in the deployment directory as the initial version of that asset.
#. The asset may be flagged `o` for optional, to suppress this behavior.
#
## Also, for each asset entry, matching files/dirs in the asset directory are 
#. pushed onto the global global arrays ($D_QUEUE_MAIN and $D_DPL_ASSET_PATHS) 
#. so it would be convenient to further process assets in a queue. This feature 
#. too can be entirelly suppressed with flag `n` for no-queue. Alternatively, 
#. the scope of files/dirs being pushed onto global arrays may be limited to 
#. only those, for which an initial version is provided with the deployment - 
#. with flag `p` for provided.
#
##  PREFIX:
#
## Each manifest line may also have a path prefix, set to key 'prefix'. Prefix 
#. is attached to the path when locating the asset, but is not carried over to 
#. the copying destination. Prefix is useful when you contain your assets in a 
#. directory within deployment directory, but don't want that sub-directory to 
#. appear in user's Grail.
#
##  QUEUE:
#
## Special key-value `(queue: split)` does not affect asset entries in any way, 
#. but inserts queue split exactly where it appears. Read framework docs for 
#. reference on split queues.
#
##  SYNTAX NOTES:
#
## Hash/pound symbol ('#') comments out the rest of the line. A line may be 
#. 'glued' to the next by terminating it with a backslash ('\'):
#>    (os: fedora) \      ## This is a single logical line
#>    (prefix: subdir) \  #. spanning three actual lines
#>    /dir/asset          #. (yes, even with comments attached like this)
#
## Leading and trailing forward slashes are optional for all paths.
#
## Whitespace rules in general are fairly permissive:
#.  * Whitespace within paths is not touched, at the edges - trimmed
#.  * Whitespace between keywords and separators is optional
#
## Within a key-value parentheses, a literal closing parenthesis must be 
#. escaped with a backslash. Literal hash/pound symbols '#' must be escaped 
#. everywhere.
#
## If a line starts with a backslash, exactly one backslash will be removed at 
#. the start. To end a line with a literal backslash, every literal backslash 
#. *at the end of the line* must be doubled.
#

# Below is an example asset manifest

# Regular assets:
fileA.cfg
fileB.cfg
file/in/subdir

# RegEx assets:
(r) file[0-9]+\.txt
(r) some/[a-z]*\.files

(prefix:subdir)   ## These assets are provided in 'subdir' directory, but will
one.f             #. be copied into the root of asset directory
two.f             #

(os: debian|bsd)  # Following assets are only considered on Debian or BSD
(prefix:)         # Removing prefix from above
        file-only-on-debian-or-bsd.ext
(r)     dir/only/on/[0-9]{3}.debian-or-bsd